name: Bump Release Version

on:
  workflow_dispatch:
    inputs:
      tag_branch:
        description: Branch to bump version
        required: true
        default: v2.11
        type: string
  workflow_call:
    inputs:
      tag_branch:
        description: Branch to bump version
        required: true
        default: v2.11
        type: string

jobs:
  bump_version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout branch
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.inputs.tag_branch }}

    - name: Prepare scripts
      run: |
        cat <<-EOF > bump.py
        import sys
        release_type = sys.argv[1]
        version = sys.argv[2]
        parts = version.split('.')
        major = int(parts[0][1:])
        minor = int(parts[1])
        patch = int(parts[2])
        if release_type == 'major':
            major = major + 1
            minor = 0
            patch = 0
        elif release_type == 'minor':
            minor = minor + 1
            patch = 0
        elif release_type == 'patch':
            patch = patch + 1
        print('.'.join(['v' + str(major), str(minor), str(patch)]))
        EOF

    - name: Configure git
      run: |
        git config user.email 'kiali-dev@googlegroups.com'
        git config user.name 'kiali-bot'

    - name: Bump to next version
      env:
        BRANCH: ${{ github.event.inputs.tag_branch }}
      run: |
        RAW_VERSION=$(sed -rn 's/^VERSION \?= (.*)/\1/p' Makefile)

        LATEST_TAG=$(git describe --tags --abbrev=0)

        # Check if the latest tag is the current release version tag
        if [[ "$LATEST_TAG" == "$RAW_VERSION" ]]; then
          RELEASE_VERSION=$(python bump.py patch $RAW_VERSION)

          # Update the version in Kiali-operator repository
          sed -i -r "s/^VERSION \?= (.*)/VERSION \?= $RELEASE_VERSION/" Makefile

          # Commit the changes
          git add Makefile
          git commit -m "Bump to version $RELEASE_VERSION"
          git push origin $(git rev-parse HEAD):refs/heads/$BRANCH

          # Create the ossm version tag
          git push origin $(git rev-parse HEAD):refs/tags/$RELEASE_VERSION-ossm
        else
          echo "Error: Latest tag $LATEST_TAG does not match expected $RAW_VERSION tag"
          exit 1
        fi
