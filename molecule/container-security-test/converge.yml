- name: Container Security Test
  hosts: localhost
  connection: local
  collections:
  - kubernetes.core
  vars:
    custom_resource: "{{ lookup('template', cr_file_path) | from_yaml }}"
  tasks:
  - import_tasks: ../common/tasks.yml

  # First test: ALLOW_SECURITY_CONTEXT_OVERRIDE=false (default behavior)
  # Patch the operator to set ALLOW_SECURITY_CONTEXT_OVERRIDE=false
  - name: Patch Kiali operator to disable security context override
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: kiali-operator
          namespace: "{{ kiali.operator_namespace }}"
        spec:
          template:
            spec:
              containers:
              - name: operator
                env:
                - name: WATCH_NAMESPACE
                  value: "{{ kiali.operator_namespace }}"
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.name
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: ALLOW_AD_HOC_KIALI_NAMESPACE
                  value: "true"
                - name: ALLOW_AD_HOC_KIALI_IMAGE
                  value: "true"
                - name: ALLOW_AD_HOC_CONTAINERS
                  value: "true"
                - name: ALLOW_SECURITY_CONTEXT_OVERRIDE
                  value: "false"
                - name: ALLOW_ALL_ACCESSIBLE_NAMESPACES
                  value: "true"
                - name: PROFILE_TASKS_TASK_OUTPUT_LIMIT
                  value: "100"
                - name: ANSIBLE_DEBUG_LOGS
                  value: "true"
                - name: ANSIBLE_VERBOSITY_KIALI_KIALI_IO
                  value: "1"
                - name: ANSIBLE_CONFIG
                  value: "/opt/ansible/ansible-profiler.cfg"
                - name: ANSIBLE_LOCAL_TEMP
                  value: "/tmp/ansible/tmp"
                - name: ANSIBLE_REMOTE_TEMP
                  value: "/tmp/ansible/tmp"
                - name: WATCHES_FILE
                  value: "watches-k8s.yaml"
      merge_type: strategic-merge

  # Wait for operator pod to be restarted with new env var
  - name: Wait for operator pod to be restarted
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: "{{ kiali.operator_namespace }}"
      label_selectors:
      - app.kubernetes.io/name = kiali-operator
      wait: true
      wait_condition:
        type: Ready
        status: "True"
      wait_timeout: 120

  # Wait for operator to reconcile the existing Kiali CR with new env var
  - name: Wait for Kiali deployment to be updated with new security context settings
    k8s_info:
      api_version: apps/v1
      kind: Deployment
      namespace: "{{ kiali.install_namespace }}"
      name: kiali
      wait: true
      wait_condition:
        type: Available
        status: "True"
      wait_timeout: 300

  # Refresh the deployment and pod info after reconciliation
  - import_tasks: ../common/tasks.yml

  # Dynamically determine container indices by name in deployment
  - name: Find security-test-container index in deployment
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    set_fact:
      security_test_container_index: "{{ my_idx }}"
    loop: "{{ deployment_containers }}"
    loop_control:
      index_var: my_idx
    when: item.name == 'security-test-container'

  - name: Find privilege-attempt-container index in deployment
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    set_fact:
      privilege_attempt_container_index: "{{ my_idx }}"
    loop: "{{ deployment_containers }}"
    loop_control:
      index_var: my_idx
    when: item.name == 'privilege-attempt-container'

  - name: Find consistency-test-container index in deployment
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    set_fact:
      consistency_test_container_index: "{{ my_idx }}"
    loop: "{{ deployment_containers }}"
    loop_control:
      index_var: my_idx
    when: item.name == 'consistency-test-container'

  - name: Find kiali container index in deployment
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    set_fact:
      kiali_container_index: "{{ my_idx }}"
    loop: "{{ deployment_containers }}"
    loop_control:
      index_var: my_idx
    when: item.name == 'kiali'

  - name: Find istio-proxy container index in deployment
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    set_fact:
      istio_proxy_container_index: "{{ my_idx }}"
    loop: "{{ deployment_containers }}"
    loop_control:
      index_var: my_idx
    when: item.name == 'istio-proxy'

  - name: Debug container indices
    debug:
      msg: "Container indices - security-test: {{ security_test_container_index }}, privilege-attempt: {{ privilege_attempt_container_index }}, consistency-test: {{ consistency_test_container_index }}, kiali: {{ kiali_container_index }}, istio-proxy: {{ istio_proxy_container_index }}"

  # Security guardrails validation for containers
  - name: Assert that the deployment has containers
    assert:
      that:
      - kiali_deployment.resources | length == 1
      - kiali_deployment.resources[0].spec.template.spec.containers is defined
      - kiali_deployment.resources[0].spec.template.spec.containers | length >= 5
      fail_msg: "Kiali deployment should have at least 5 containers (our 4 custom ones including istio-proxy, plus the main kiali container, plus potentially additional containers from Istio injection)"

  - name: Assert that security guardrails are enforced on security-test-container
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    assert:
      that:
      - deployment_containers[security_test_container_index | int].name == 'security-test-container'
      - deployment_containers[security_test_container_index | int].securityContext is defined
      - deployment_containers[security_test_container_index | int].securityContext.allowPrivilegeEscalation == false
      - deployment_containers[security_test_container_index | int].securityContext.privileged == false
      - deployment_containers[security_test_container_index | int].securityContext.readOnlyRootFilesystem == true
      - deployment_containers[security_test_container_index | int].securityContext.runAsNonRoot == true
      - deployment_containers[security_test_container_index | int].securityContext.capabilities.drop == ['ALL']
      fail_msg: "Security-test-container should have restrictive security context enforced by operator"

  - name: Assert that security guardrails override user-provided security context on privilege-attempt-container
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    assert:
      that:
      - deployment_containers[privilege_attempt_container_index | int].name == 'privilege-attempt-container'
      - deployment_containers[privilege_attempt_container_index | int].securityContext is defined
      - deployment_containers[privilege_attempt_container_index | int].securityContext.allowPrivilegeEscalation == false
      - deployment_containers[privilege_attempt_container_index | int].securityContext.privileged == false
      - deployment_containers[privilege_attempt_container_index | int].securityContext.readOnlyRootFilesystem == true
      - deployment_containers[privilege_attempt_container_index | int].securityContext.runAsNonRoot == true
      - deployment_containers[privilege_attempt_container_index | int].securityContext.capabilities.drop == ['ALL']
      fail_msg: "Privilege-attempt-container should have security context overridden by operator (user attempt to set privileged=true should be blocked)"

  - name: Assert that security guardrails are enforced on consistency-test-container
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    assert:
      that:
      - deployment_containers[consistency_test_container_index | int].name == 'consistency-test-container'
      - deployment_containers[consistency_test_container_index | int].securityContext is defined
      - deployment_containers[consistency_test_container_index | int].securityContext.allowPrivilegeEscalation == false
      - deployment_containers[consistency_test_container_index | int].securityContext.privileged == false
      - deployment_containers[consistency_test_container_index | int].securityContext.readOnlyRootFilesystem == true
      - deployment_containers[consistency_test_container_index | int].securityContext.runAsNonRoot == true
      - deployment_containers[consistency_test_container_index | int].securityContext.capabilities.drop == ['ALL']
      fail_msg: "Consistency-test-container should have restrictive security context enforced by operator"

  - name: Assert that security guardrails are enforced on istio-proxy container
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    assert:
      that:
      - deployment_containers[istio_proxy_container_index | int].name == 'istio-proxy'
      - deployment_containers[istio_proxy_container_index | int].securityContext is defined
      - deployment_containers[istio_proxy_container_index | int].securityContext.allowPrivilegeEscalation == false
      - deployment_containers[istio_proxy_container_index | int].securityContext.privileged == false
      - deployment_containers[istio_proxy_container_index | int].securityContext.readOnlyRootFilesystem == true
      - deployment_containers[istio_proxy_container_index | int].securityContext.runAsNonRoot == true
      - deployment_containers[istio_proxy_container_index | int].securityContext.capabilities.drop == ['ALL']
      fail_msg: "Istio-proxy container should have restrictive security context enforced by operator (user attempt to set privileged=true should be blocked)"

  # Find container indices in the actual Pod (after Istio injection)
  - name: Find istio-proxy container index in Pod
    vars:
      kiali_pod_spec: "{{ kiali_pod.resources[0].spec }}"
    set_fact:
      pod_istio_proxy_container_index: "{{ my_idx }}"
    loop: "{{ kiali_pod_spec.containers }}"
    loop_control:
      index_var: my_idx
    when: item.name == 'istio-proxy'

  - name: Assert that Istio sidecar injection replaced the 'auto' image
    vars:
      kiali_pod_spec: "{{ kiali_pod.resources[0].spec }}"
    assert:
      that:
      - kiali_pod_spec.containers[pod_istio_proxy_container_index | int].image is defined
      - kiali_pod_spec.containers[pod_istio_proxy_container_index | int].image != 'auto'
      - kiali_pod_spec.containers[pod_istio_proxy_container_index | int].image is match('.*istio.*|.*proxyv2.*')
      fail_msg: "Istio sidecar injection should have replaced the 'auto' image with the actual Istio proxy image, but found: {{ kiali_pod_spec.containers[pod_istio_proxy_container_index | int].image }}"

  - name: Assert that deployment still has 'auto' image in template (before Istio injection)
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    assert:
      that:
      - deployment_containers[istio_proxy_container_index | int].image is defined
      - deployment_containers[istio_proxy_container_index | int].image == 'auto'
      fail_msg: "Deployment template should still have 'auto' image as specified in the CR (Istio injection happens at Pod creation time)"

  # Verify Istio sidecar injection configuration
  - name: Assert that Kiali pod template has correct Istio sidecar injection annotations
    assert:
      that:
      - kiali_deployment.resources[0].spec.template.metadata.annotations is defined
      - kiali_deployment.resources[0].spec.template.metadata.annotations['proxy.istio.io/config'] is defined
      - kiali_deployment.resources[0].spec.template.metadata.annotations['proxy.istio.io/config'] == '{ "holdApplicationUntilProxyStarts": true }'
      fail_msg: "Kiali pod should have proxy.istio.io/config annotation for proper sidecar startup ordering"

  - name: Assert that Kiali pod template has correct Istio sidecar injection labels
    assert:
      that:
      - kiali_deployment.resources[0].spec.template.metadata.labels is defined
      - kiali_deployment.resources[0].spec.template.metadata.labels['sidecar.istio.io/inject'] is defined
      - kiali_deployment.resources[0].spec.template.metadata.labels['sidecar.istio.io/inject'] == 'true'
      fail_msg: "Kiali pod should have sidecar.istio.io/inject=true label for Istio sidecar injection"

  # Second test: ALLOW_SECURITY_CONTEXT_OVERRIDE=true (allow custom security contexts)
  # Patch the operator to set ALLOW_SECURITY_CONTEXT_OVERRIDE=true
  - name: Patch Kiali operator to enable security context override
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: kiali-operator
          namespace: "{{ kiali.operator_namespace }}"
        spec:
          template:
            spec:
              containers:
              - name: operator
                env:
                - name: WATCH_NAMESPACE
                  value: "{{ kiali.operator_namespace }}"
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.name
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: ALLOW_AD_HOC_KIALI_NAMESPACE
                  value: "true"
                - name: ALLOW_AD_HOC_KIALI_IMAGE
                  value: "true"
                - name: ALLOW_AD_HOC_CONTAINERS
                  value: "true"
                - name: ALLOW_SECURITY_CONTEXT_OVERRIDE
                  value: "true"
                - name: ALLOW_ALL_ACCESSIBLE_NAMESPACES
                  value: "true"
                - name: PROFILE_TASKS_TASK_OUTPUT_LIMIT
                  value: "100"
                - name: ANSIBLE_DEBUG_LOGS
                  value: "true"
                - name: ANSIBLE_VERBOSITY_KIALI_KIALI_IO
                  value: "1"
                - name: ANSIBLE_CONFIG
                  value: "/opt/ansible/ansible-profiler.cfg"
                - name: ANSIBLE_LOCAL_TEMP
                  value: "/tmp/ansible/tmp"
                - name: ANSIBLE_REMOTE_TEMP
                  value: "/tmp/ansible/tmp"
                - name: WATCHES_FILE
                  value: "watches-k8s.yaml"
      merge_type: strategic-merge

  # Wait for operator pod to be restarted with new env var
  - name: Wait for operator pod to be restarted (override enabled)
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: "{{ kiali.operator_namespace }}"
      label_selectors:
      - app.kubernetes.io/name = kiali-operator
      wait: true
      wait_condition:
        type: Ready
        status: "True"
      wait_timeout: 120

  # Wait for operator to reconcile the existing Kiali CR with security context override enabled
  - name: Wait for Kiali deployment to be updated with custom security context settings
    k8s_info:
      api_version: apps/v1
      kind: Deployment
      namespace: "{{ kiali.install_namespace }}"
      name: kiali
      wait: true
      wait_condition:
        type: Available
        status: "True"
      wait_timeout: 300

  # Refresh the deployment and pod info after reconciliation
  - import_tasks: ../common/tasks.yml

  # Dynamically determine container indices by name in deployment (for override test)
  - name: Find security-test-container index in deployment (override test)
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    set_fact:
      security_test_container_index_override: "{{ my_idx }}"
    loop: "{{ deployment_containers }}"
    loop_control:
      index_var: my_idx
    when: item.name == 'security-test-container'

  - name: Find privilege-attempt-container index in deployment (override test)
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    set_fact:
      privilege_attempt_container_index_override: "{{ my_idx }}"
    loop: "{{ deployment_containers }}"
    loop_control:
      index_var: my_idx
    when: item.name == 'privilege-attempt-container'

  # Test that custom security contexts are preserved when ALLOW_SECURITY_CONTEXT_OVERRIDE=true
  - name: Assert that custom security context is preserved on security-test-container
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    assert:
      that:
      - deployment_containers[security_test_container_index_override | int].name == 'security-test-container'
      - deployment_containers[security_test_container_index_override | int].securityContext is defined
      - deployment_containers[security_test_container_index_override | int].securityContext.runAsUser == 1001
      # The container should still have some mandatory restrictions overridden if they weren't specified
      - deployment_containers[security_test_container_index_override | int].securityContext.allowPrivilegeEscalation == false
      - deployment_containers[security_test_container_index_override | int].securityContext.privileged == false
      - deployment_containers[security_test_container_index_override | int].securityContext.readOnlyRootFilesystem == true
      - deployment_containers[security_test_container_index_override | int].securityContext.runAsNonRoot == true
      - deployment_containers[security_test_container_index_override | int].securityContext.capabilities.drop == ['ALL']
      fail_msg: "Security-test-container should preserve custom runAsUser but still have mandatory security restrictions when ALLOW_SECURITY_CONTEXT_OVERRIDE=true"

  - name: Assert that custom security context is preserved on privilege-attempt-container
    vars:
      deployment_containers: "{{ kiali_deployment.resources[0].spec.template.spec.containers }}"
    assert:
      that:
      - deployment_containers[privilege_attempt_container_index_override | int].name == 'privilege-attempt-container'
      - deployment_containers[privilege_attempt_container_index_override | int].securityContext is defined
      # User-provided values should be preserved
      - deployment_containers[privilege_attempt_container_index_override | int].securityContext.privileged == true
      - deployment_containers[privilege_attempt_container_index_override | int].securityContext.allowPrivilegeEscalation == true
      - deployment_containers[privilege_attempt_container_index_override | int].securityContext.readOnlyRootFilesystem == false
      - deployment_containers[privilege_attempt_container_index_override | int].securityContext.runAsNonRoot == false
      - deployment_containers[privilege_attempt_container_index_override | int].securityContext.runAsUser == 1002
      - deployment_containers[privilege_attempt_container_index_override | int].securityContext.capabilities.add == ['SYS_ADMIN']
      fail_msg: "Privilege-attempt-container should preserve all custom security context settings when ALLOW_SECURITY_CONTEXT_OVERRIDE=true"
